name: Deploy MeroDocs ICP Canisters

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  DFX_VERSION: "0.28.0"
  RUST_VERSION: "1.89.0"
  CARGO_TERM_COLOR: always

jobs:
  build-and-deploy:
    name: Build and Deploy MeroDocs Canisters
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./canisters

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./canisters/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y bc
          cargo install --force candid-extractor --version 0.1.4
          DFXVM_INIT_YES=true DFX_VERSION=${{ env.DFX_VERSION }} sh -c "$(curl -fsSL https://internetcomputer.org/install.sh)"
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Verify DFX installation
        run: |
          source "$HOME/.local/share/dfx/env"
          dfx --version

      - name: Setup dfx identity
        run: |
          source "$HOME/.local/share/dfx/env"
          echo "${{ secrets.DFX_IDENTITY_PEM }}" > identity.pem
          # Remove deployment identity if it exists
          dfx identity remove deployment 2>/dev/null || true
          # Import the deployment identity without encryption
          dfx identity import deployment identity.pem --disable-encryption
          dfx identity use deployment
          rm identity.pem
          # Set environment variable to suppress mainnet plaintext identity warning
          echo "DFX_WARNING=-mainnet_plaintext_identity" >> $GITHUB_ENV

      - name: Create and Build canisters
        run: |
          source "$HOME/.local/share/dfx/env"
          # First pull dependencies
          dfx deps pull
          dfx deps init
          # Create canisters on IC network if they don't exist
          dfx canister create --network ic --with-cycles 1000000000000 merodocs_registry || echo "merodocs_registry canister already exists"
          dfx canister create --network ic --with-cycles 1000000000000 llm_chatbot || echo "llm_chatbot canister already exists"
          # Wait a moment for canister IDs to be properly registered
          sleep 5
          # Verify canister IDs are available
          echo "Verifying canister IDs..."
          dfx canister id merodocs_registry --network ic
          dfx canister id llm_chatbot --network ic
          # Build all canisters
          dfx build
          # Verify build artifacts exist
          ls -la target/wasm32-unknown-unknown/release/
          test -f target/wasm32-unknown-unknown/release/merodocs_registry.wasm
          test -f target/wasm32-unknown-unknown/release/llm_chatbot.wasm

      - name: Deploy canisters
        run: |
          source "$HOME/.local/share/dfx/env"
          # Check wallet balance
          echo "Checking wallet balance..."
          dfx wallet --network ic balance || echo "Warning: Could not check wallet balance"
          # Calculate cycles for each canister (2T cycles total, split between canisters)
          CYCLES=$(echo "2.0 * 1000000000000" | bc -l | cut -d. -f1)
          echo "Deploying with $CYCLES cycles per canister"
          # Deploy dependencies first
          echo "Deploying dependencies..."
          dfx deps deploy --network ic || echo "No dependencies to deploy"
          # Verify canister IDs before deployment
          echo "Verifying canister IDs before deployment..."
          dfx canister id merodocs_registry --network ic
          dfx canister id llm_chatbot --network ic
          # Deploy our canisters using dfx deploy which handles both create and install
          echo "Deploying merodocs_registry..."
          dfx deploy --network ic --with-cycles $CYCLES merodocs_registry || dfx canister install --network ic --mode reinstall merodocs_registry
          echo "Deploying llm_chatbot..."
          dfx deploy --network ic --with-cycles $CYCLES llm_chatbot || dfx canister install --network ic --mode reinstall llm_chatbot
          echo "Deployment completed successfully!"

      - name: Get canister info
        run: |
          source "$HOME/.local/share/dfx/env"
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get canister IDs and show deployment info
          if dfx canister --network ic id merodocs_registry >/dev/null 2>&1; then
            REGISTRY_CANISTER_ID=$(dfx canister --network ic id merodocs_registry)
            echo "### MeroDocs Registry" >> $GITHUB_STEP_SUMMARY
            echo "- **Canister ID**: \`$REGISTRY_CANISTER_ID\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Candid Interface**: https://${REGISTRY_CANISTER_ID}.icp0.io/_/candid" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if dfx canister --network ic id llm_chatbot >/dev/null 2>&1; then
            CHATBOT_CANISTER_ID=$(dfx canister --network ic id llm_chatbot)
            echo "### LLM Chatbot" >> $GITHUB_STEP_SUMMARY
            echo "- **Canister ID**: \`$CHATBOT_CANISTER_ID\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Candid Interface**: https://${CHATBOT_CANISTER_ID}.icp0.io/_/candid" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Show deployment status
          dfx canister --network ic status --all >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Could not retrieve canister status" >> $GITHUB_STEP_SUMMARY
