name: Deploy MeroDocs ICP Canisters

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  DFX_VERSION: "0.28.0"
  RUST_VERSION: "1.89.0"

jobs:
  build-and-deploy:
    name: Build and Deploy MeroDocs Canisters
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./canisters

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./canisters/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y bc
          cargo install --force candid-extractor --version 0.1.4
          DFXVM_INIT_YES=true DFX_VERSION=${{ env.DFX_VERSION }} sh -c "$(curl -fsSL https://internetcomputer.org/install.sh)"
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Verify DFX installation
        run: |
          source "$HOME/.local/share/dfx/env"
          dfx --version

      - name: Setup dfx identity
        run: |
          source "$HOME/.local/share/dfx/env"
          echo "${{ secrets.DFX_IDENTITY_PEM }}" > identity.pem
          # Remove deployment identity if it exists
          dfx identity remove deployment 2>/dev/null || true
          # Import the deployment identity without encryption
          dfx identity import deployment identity.pem --disable-encryption
          dfx identity use deployment
          rm identity.pem
          # Set environment variable to suppress mainnet plaintext identity warning
          echo "DFX_WARNING=-mainnet_plaintext_identity" >> $GITHUB_ENV

      - name: Build canisters
        run: |
          source "$HOME/.local/share/dfx/env"
          # Pull dependencies first
          dfx deps pull
          dfx deps init
          # Create canisters if they don't exist
          dfx canister create --network ic merodocs_registry || echo "merodocs_registry already exists"
          dfx canister create --network ic llm_chatbot || echo "llm_chatbot already exists"
          # Build canisters
          dfx build
          cargo build --target wasm32-unknown-unknown --release -p merodocs_registry
          cargo build --target wasm32-unknown-unknown --release -p llm_chatbot
          candid-extractor target/wasm32-unknown-unknown/release/merodocs_registry.wasm > merodocs_registry/merodocs_registry.did
          candid-extractor target/wasm32-unknown-unknown/release/llm_chatbot.wasm > llm_chatbot/llm_chatbot.did

      - name: Deploy canisters
        run: |
          source "$HOME/.local/share/dfx/env"
          CYCLES=$(echo "2.0 * 1000000000000" | bc -l | cut -d. -f1)
          dfx deploy --network ic --with-cycles $CYCLES

      - name: Get canister info
        run: |
          source "$HOME/.local/share/dfx/env"
          REGISTRY_CANISTER_ID=$(dfx canister --network ic id merodocs_registry)
          CHATBOT_CANISTER_ID=$(dfx canister --network ic id llm_chatbot)
          echo "**MeroDocs Registry Canister ID**: $REGISTRY_CANISTER_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Registry URL**: https://${REGISTRY_CANISTER_ID}.icp0.io" >> $GITHUB_STEP_SUMMARY
          echo "**LLM Chatbot Canister ID**: $CHATBOT_CANISTER_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Chatbot URL**: https://${CHATBOT_CANISTER_ID}.icp0.io" >> $GITHUB_STEP_SUMMARY
